// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test add attribute 1`] = `
Object {
  "attributeAndChildren": Object {
    "attributes": Object {
      "deleteNameSet": Immutable.Set [],
      "setNameValueMap": Immutable.Map {
        "id": "newId",
      },
    },
    "children": Object {
      "kind": "skip",
    },
    "events": Object {
      "deleteNameSet": Immutable.Set [],
      "setNameValueMap": Immutable.Map {},
    },
  },
  "kind": "update",
}
`;

exports[`test add element 1`] = `
Object {
  "children": Array [
    Object {
      "attributeAndChildren": Object {
        "attributes": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
        "children": Object {
          "kind": "skip",
        },
        "events": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
      },
      "kind": "update",
    },
    Object {
      "attributeAndChildren": Object {
        "attributes": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
        "children": Object {
          "kind": "skip",
        },
        "events": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
      },
      "kind": "update",
    },
    Object {
      "element": Object {
        "attributeAndChildren": Object {
          "attributes": Immutable.Map {
            "class": "css-0",
          },
          "children": Object {
            "tag": Symbol(Children - Text),
            "value": "newC",
          },
          "events": Immutable.Map {},
        },
        "tagName": "div",
      },
      "key": "c",
      "kind": "insert",
    },
  ],
  "kind": "childDiffList",
}
`;

exports[`test change key order 1`] = `
Object {
  "children": Array [
    Object {
      "attributeAndChildren": Object {
        "attributes": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
        "children": Object {
          "kind": "skip",
        },
        "events": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
      },
      "kind": "update",
    },
    Object {
      "attributeAndChildren": Object {
        "attributes": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
        "children": Object {
          "kind": "skip",
        },
        "events": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
      },
      "kind": "update",
    },
    Object {
      "kind": "replace",
      "newElement": Object {
        "attributeAndChildren": Object {
          "attributes": Immutable.Map {
            "id": "A",
            "class": "css-0",
          },
          "children": Object {
            "tag": Symbol(Children - Text),
            "value": "A",
          },
          "events": Immutable.Map {},
        },
        "tagName": "div",
      },
    },
  ],
  "kind": "childDiffList",
}
`;

exports[`test complex diff 1`] = `
Object {
  "children": Array [
    Object {
      "attributeAndChildren": Object {
        "attributes": Object {
          "deleteNameSet": Immutable.Set [
            "id",
          ],
          "setNameValueMap": Immutable.Map {},
        },
        "children": Object {
          "kind": "setText",
          "text": "A",
        },
        "events": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
      },
      "kind": "update",
    },
    Object {
      "attributeAndChildren": Object {
        "attributes": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
        "children": Object {
          "kind": "skip",
        },
        "events": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
      },
      "kind": "update",
    },
    Object {
      "element": Object {
        "attributeAndChildren": Object {
          "attributes": Immutable.Map {
            "class": "css-0",
          },
          "children": Object {
            "tag": Symbol(Children - Text),
            "value": "K",
          },
          "events": Immutable.Map {},
        },
        "tagName": "div",
      },
      "key": "K",
      "kind": "insert",
    },
    Object {
      "attributeAndChildren": Object {
        "attributes": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
        "children": Object {
          "children": Array [
            Object {
              "attributeAndChildren": Object {
                "attributes": Object {
                  "deleteNameSet": Immutable.Set [],
                  "setNameValueMap": Immutable.Map {},
                },
                "children": Object {
                  "kind": "skip",
                },
                "events": Object {
                  "deleteNameSet": Immutable.Set [],
                  "setNameValueMap": Immutable.Map {},
                },
              },
              "kind": "update",
            },
            Object {
              "kind": "delete",
            },
          ],
          "kind": "childDiffList",
        },
        "events": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
      },
      "kind": "update",
    },
    Object {
      "kind": "delete",
    },
    Object {
      "element": Object {
        "attributeAndChildren": Object {
          "attributes": Immutable.Map {
            "class": "css-0",
          },
          "children": Object {
            "tag": Symbol(Children - Text),
            "value": "S",
          },
          "events": Immutable.Map {},
        },
        "tagName": "div",
      },
      "key": "S",
      "kind": "insert",
    },
    Object {
      "attributeAndChildren": Object {
        "attributes": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
        "children": Object {
          "kind": "skip",
        },
        "events": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
      },
      "kind": "update",
    },
    Object {
      "kind": "delete",
    },
  ],
  "kind": "childDiffList",
}
`;

exports[`test delete all children 1`] = `
Object {
  "children": Array [
    Object {
      "element": Object {
        "attributeAndChildren": Object {
          "attributes": Immutable.Map {
            "class": "css-0",
          },
          "children": Object {
            "tag": Symbol(Children - Text),
            "value": "X",
          },
          "events": Immutable.Map {},
        },
        "tagName": "div",
      },
      "key": "x",
      "kind": "insert",
    },
    Object {
      "element": Object {
        "attributeAndChildren": Object {
          "attributes": Immutable.Map {
            "class": "css-0",
          },
          "children": Object {
            "tag": Symbol(Children - Text),
            "value": "Y",
          },
          "events": Immutable.Map {},
        },
        "tagName": "div",
      },
      "key": "y",
      "kind": "insert",
    },
    Object {
      "element": Object {
        "attributeAndChildren": Object {
          "attributes": Immutable.Map {
            "class": "css-0",
          },
          "children": Object {
            "tag": Symbol(Children - Text),
            "value": "Z",
          },
          "events": Immutable.Map {},
        },
        "tagName": "div",
      },
      "key": "z",
      "kind": "insert",
    },
  ],
  "kind": "childDiffList",
}
`;

exports[`test delete attribute 1`] = `
Object {
  "attributeAndChildren": Object {
    "attributes": Object {
      "deleteNameSet": Immutable.Set [
        "id",
      ],
      "setNameValueMap": Immutable.Map {},
    },
    "children": Object {
      "kind": "skip",
    },
    "events": Object {
      "deleteNameSet": Immutable.Set [],
      "setNameValueMap": Immutable.Map {},
    },
  },
  "kind": "update",
}
`;

exports[`test delete element 1`] = `
Object {
  "children": Array [
    Object {
      "attributeAndChildren": Object {
        "attributes": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
        "children": Object {
          "kind": "skip",
        },
        "events": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
      },
      "kind": "update",
    },
    Object {
      "kind": "delete",
    },
    Object {
      "attributeAndChildren": Object {
        "attributes": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
        "children": Object {
          "kind": "skip",
        },
        "events": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
      },
      "kind": "update",
    },
  ],
  "kind": "childDiffList",
}
`;

exports[`test different text return setText 1`] = `
Object {
  "kind": "setText",
  "text": "B",
}
`;

exports[`test insert element 1`] = `
Object {
  "children": Array [
    Object {
      "attributeAndChildren": Object {
        "attributes": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
        "children": Object {
          "kind": "skip",
        },
        "events": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
      },
      "kind": "update",
    },
    Object {
      "element": Object {
        "attributeAndChildren": Object {
          "attributes": Immutable.Map {
            "class": "css-0",
          },
          "children": Object {
            "tag": Symbol(Children - Text),
            "value": "new",
          },
          "events": Immutable.Map {},
        },
        "tagName": "div",
      },
      "key": "new",
      "kind": "insert",
    },
    Object {
      "attributeAndChildren": Object {
        "attributes": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
        "children": Object {
          "kind": "skip",
        },
        "events": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
      },
      "kind": "update",
    },
  ],
  "kind": "childDiffList",
}
`;

exports[`test replace all 1`] = `
Object {
  "children": Array [
    Object {
      "element": Object {
        "attributeAndChildren": Object {
          "attributes": Immutable.Map {
            "class": "css-0",
          },
          "children": Object {
            "tag": Symbol(Children - Text),
            "value": "X",
          },
          "events": Immutable.Map {},
        },
        "tagName": "div",
      },
      "key": "x",
      "kind": "insert",
    },
    Object {
      "element": Object {
        "attributeAndChildren": Object {
          "attributes": Immutable.Map {
            "class": "css-0",
          },
          "children": Object {
            "tag": Symbol(Children - Text),
            "value": "Y",
          },
          "events": Immutable.Map {},
        },
        "tagName": "div",
      },
      "key": "y",
      "kind": "insert",
    },
    Object {
      "element": Object {
        "attributeAndChildren": Object {
          "attributes": Immutable.Map {
            "class": "css-0",
          },
          "children": Object {
            "tag": Symbol(Children - Text),
            "value": "Z",
          },
          "events": Immutable.Map {},
        },
        "tagName": "div",
      },
      "key": "z",
      "kind": "insert",
    },
  ],
  "kind": "childDiffList",
}
`;

exports[`test replace element 1`] = `
Object {
  "children": Array [
    Object {
      "attributeAndChildren": Object {
        "attributes": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
        "children": Object {
          "kind": "skip",
        },
        "events": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
      },
      "kind": "update",
    },
    Object {
      "kind": "delete",
    },
    Object {
      "element": Object {
        "attributeAndChildren": Object {
          "attributes": Immutable.Map {
            "class": "css-0",
          },
          "children": Object {
            "tag": Symbol(Children - Text),
            "value": "new",
          },
          "events": Immutable.Map {},
        },
        "tagName": "div",
      },
      "key": "new",
      "kind": "insert",
    },
    Object {
      "attributeAndChildren": Object {
        "attributes": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
        "children": Object {
          "kind": "skip",
        },
        "events": Object {
          "deleteNameSet": Immutable.Set [],
          "setNameValueMap": Immutable.Map {},
        },
      },
      "kind": "update",
    },
  ],
  "kind": "childDiffList",
}
`;

exports[`test same text return skip 1`] = `
Object {
  "kind": "skip",
}
`;
